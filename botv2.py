import logging
import os
from datetime import datetime

import telebot
import time
import random
import requests  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

from dotenv import load_dotenv
from sqlalchemy.dialects.postgresql import psycopg2
from telebot import types

from config import questions_dict
from src.utils import answer_with_label
# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
import psycopg2

load_dotenv()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PORT = "8080"
db_host = os.getenv("DB_HOST")
db_name = os.getenv("DB_NAME")
db_user = os.getenv("DB_USER")
db_password = os.getenv("DB_PASSWORD")
URL = os.getenv("URL")
token = os.getenv("API_TOKEN")
operator_id = os.getenv("OPERATOR_ID")

bot = telebot.TeleBot(token)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
OPERATOR_ID = operator_id
bot.user_question = None
bot.user_answer = None

help_msg = (
    "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!*\n\n"
    "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:\n\n"
    "1. *–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å*: –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ.\n"
    "2. *–û—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç*: –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –æ—Ü–µ–Ω–∫–æ–π –æ—Ç 1 –¥–æ 5.\n"
    "3. *–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º*: –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª, –∏ –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –µ–≥–æ –Ω–∞ 1, —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\n"
    "*–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏! üôÇ*"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(filename="bot.log", encoding="utf-8", level=logging.DEBUG)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info(f"New message: {message.text}")
    if message.from_user.id == OPERATOR_ID:
        send_operator_welcome(message)
    else:
        send_user_welcome(message)


def generate_random_number(length=30):
    digits = "0123456789"
    random_number = ''.join(random.choices(digits, k=length))
    return random_number


def save_rating_to_db(user_name, rating, user_message, output_message):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
        conn = psycopg2.connect(
            host=db_host, database=db_name, user=db_user, password=db_password
        )
        cur = conn.cursor()
        logger.info(f"New message: {user_message}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
        random_id = generate_random_number()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        user_message = "test"
        output_message = "test2"
        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É statistics
        cur.execute(
            "INSERT INTO statistics (id, user_name, rating, message, output_message, created_at) VALUES (%s, %s, %s, %s, %s, %s)",
            (int(random_id), str(user_name), int(rating), str(user_message), str(output_message), datetime.now())
        )

        # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        conn.commit()
        cur.close()
        conn.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", error)


def send_user_welcome(message):
    logger.info(f"New message: {message.text}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    btn2 = types.KeyboardButton("üìñ –ü–æ–º–æ—â—å")
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, —è –ú–§–¶ –±–æ—Ç ¬´–ú–∞—Ä–∏—è¬ª.\n"
                     "–Ø –ø–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞—é—â–∏–π—Å—è —Ä–∞–±–æ—Ç—ã –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞.",
                     reply_markup=markup)


def send_operator_welcome(message):
    logger.info(f"New message: {message.text}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    btn2 = types.KeyboardButton("‚ùì –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç, —è –ú–§–¶ –±–æ—Ç ¬´–ú–∞—Ä–∏—è¬ª.\n"
                     "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!",
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@bot.message_handler(func=lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question(message):
    logger.info(f"New message: {message.text}")
    if message.from_user.id == OPERATOR_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        hide_markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.",
                         reply_markup=hide_markup)
        bot.register_next_step_handler(message, process_question)


def send_text_streaming(message):
    logger.info(f"New message: {message.text}")
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –æ—Ç–≤–µ—Ç–æ–º
        file_path = "answer.txt"

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ
        with open(file_path, "r", encoding="utf-8") as file:
            text = file.read()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
        formatted_text = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç: \n*_{text}_"

        time.sleep(2)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, formatted_text, parse_mode='Markdown')

        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É
        send_rating_request(message)

    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def simulate_loading(chat_id, text, delay=1, iterations=1):
    message = bot.send_message(chat_id, text, parse_mode='Markdown')
    for i in range(iterations):
        time.sleep(delay)
        dots = '.' * (i % 3 + 1)
        bot.edit_message_text(text + dots, chat_id, message.message_id, parse_mode='Markdown')


def process_question(message):
    logger.info(f"User's question: {message.text}")
    question = message.text
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    bot.answer_question = question
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    simulate_loading(message.chat.id, f"‚ÑπÔ∏è –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: \n ¬´_{question}_¬ª.\n"
                                      f"–ù–∞—á–∏–Ω–∞—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ")

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
    res_class = requests.post(f"{URL}/classify", json={"text": message.text})

    if res_class.status_code == 200:
        label = res_class.json()["label"]
        if label != 111:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
            # res_saiga = requests.post(f"{URL}/saiga", json={"text": message.text})

            # if res_saiga.status_code == 200:
            #    text = res_saiga.json()["prediction"]
            text = "–¢–µ—Å—Ç - –û—Ç–≤–µ—Ç"
            t = answer_with_label(text, label)
            file_path = "answer.txt"

            bot.user_answer = t
            bot.user_question = message.text

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ
            with open(file_path, "w", encoding="utf-8") as file:
                file.write(t)
            send_text_streaming(message)
    #         else:
    #             logger.error(res_saiga.text)
    #             bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    #     else:
    #         bot.reply_to(
    #             message,
    #             "–ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–Ω –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ –ú–§–¶. –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –µ–≥–æ —É—Ç–æ—á–Ω–∏—Ç—å?",
    #         )
    # else:
    #     logger.error(res_class.text)
    #     bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


def send_rating_request(message):
    logger.info(f"New message: {message.text}")
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    markup = types.InlineKeyboardMarkup(row_width=5)
    buttons = [types.InlineKeyboardButton(str(i), callback_data=str(i)) for i in range(1, 6)]
    markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –æ—Ü–µ–Ω–∫–µ
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —á–∞—Ç-–±–æ—Ç–∞ –ø–æ 5-—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ.", reply_markup=markup)


def show_main_buttons(message):
    logger.info(f"New message: {message.text}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    btn2 = types.KeyboardButton("üìñ –ü–æ–º–æ—â—å")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–ñ–µ–ª–∞–µ—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=markup)


def show_operator_buttons(message):
    logger.info(f"New message: {message.text}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    btn2 = types.KeyboardButton("‚ùì –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
    btn_back = types.KeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn_back)
    bot.send_message(message.chat.id, "–ñ–µ–ª–∞–µ—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def show_statistics_categories(message):
    logger.info(f"New message: {message.text}")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    categories = ["–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –î–µ—Ç—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ü–∞—Å–ø–æ—Ä—Ç", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ó–ê–ì–°", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                  "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –í—ã–ø–ª–∞—Ç—ã", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ù–∞–ª–æ–≥–∏", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –õ–∏—Ü–µ–Ω–∑–∏–∏"]
    buttons = [types.KeyboardButton(category) for category in categories]
    btn_back = types.KeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    markup.add(*buttons, btn_back)
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def show_questions_categories(message):
    logger.info(f"New message: {message.text}")
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    categories = ["–î–µ—Ç—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "–ü–∞—Å–ø–æ—Ä—Ç", "–ó–ê–ì–°", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–í—ã–ø–ª–∞—Ç—ã", "–ù–∞–ª–æ–≥–∏", "–õ–∏—Ü–µ–Ω–∑–∏–∏"]
    buttons = [types.KeyboardButton(category) for category in categories]
    btn_back = types.KeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    markup.add(*buttons, btn_back)
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
@bot.message_handler(
    func=lambda message: message.text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" and message.from_user.id == OPERATOR_ID)
def view_statistics(message):
    logger.info(f"New message: {message.text}")
    show_statistics_categories(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã" (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
@bot.message_handler(
    func=lambda message: message.text == "‚ùì –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã" and message.from_user.id == OPERATOR_ID)
def view_questions(message):
    logger.info(f"New message: {message.text}")
    show_questions_categories(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(
    func=lambda message: message.text in ["–î–µ—Ç—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "–ü–∞—Å–ø–æ—Ä—Ç", "–ó–ê–ì–°", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–í—ã–ø–ª–∞—Ç—ã", "–ù–∞–ª–æ–≥–∏",
                                          "–õ–∏—Ü–µ–Ω–∑–∏–∏"])
def handle_category_q_selection(message):
    logger.info(f"New message: {message.text}")
    category = message.text
    if category in questions_dict:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        questions = questions_dict[category]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        buttons = [types.KeyboardButton(question) for question in questions]
        btn_back = types.KeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
        markup.add(*buttons, btn_back)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@bot.message_handler(func=lambda message: message.text in sum(questions_dict.values(), []))
def handle_question_selection(message):
    logger.info(f"New message: {message.text}")
    time.sleep(1)
    question = message.text
    bot.selected_question = question
    time.sleep(1)
    bot.send_message(message.chat.id, f"*–í–æ–ø—Ä–æ—Å:* {question}\n\n"
                                      "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                     parse_mode='Markdown')
    bot.register_next_step_handler(message, handle_operator_response)


def handle_operator_response(message):
    logger.info(f"New message: {message.text}")
    response = message.text
    time.sleep(2)
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(
    func=lambda message: message.text in ["–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –î–µ—Ç—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ü–∞—Å–ø–æ—Ä—Ç", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ó–ê–ì–°",
                                          "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –í—ã–ø–ª–∞—Ç—ã", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ù–∞–ª–æ–≥–∏",
                                          "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –õ–∏—Ü–µ–Ω–∑–∏–∏"])
def handle_category_selection(message):
    logger.info(f"New message: {message.text}")
    category = message.text
    if message.from_user.id == OPERATOR_ID:
        if category in ["–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –î–µ—Ç—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ü–∞—Å–ø–æ—Ä—Ç", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ó–ê–ì–°", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                        "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –í—ã–ø–ª–∞—Ç—ã", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –ù–∞–ª–æ–≥–∏", "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        "–°—Ç–∞—Å—Ç–∏—Ç–∫–∞: –õ–∏—Ü–µ–Ω–∑–∏–∏"]:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            num_questions = random.randint(20, 100)
            satisfaction_level = round(random.uniform(2.0, 5.0), 1)
            response = (f"–°–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: *{category}*\n"
                        f"–ö–æ–ª-–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: *{num_questions}*\n"
                        f"–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: *{satisfaction_level} –±–∞–ª–ª–∞*")
            time.sleep(1)
            bot.send_message(message.chat.id, response, parse_mode='Markdown')
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ–º–æ—â–∏)
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìñ –ü–æ–º–æ—â—å"
@bot.message_handler(func=lambda message: message.text == "üìñ –ü–æ–º–æ—â—å")
def help_message(message):
    logger.info(f"New message: {message.text}")
    if message.from_user.id == OPERATOR_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        bot.send_message(message.chat.id,
                         "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:\n"
                         "/start - –Ω–∞—á–∞—Ç—å\n"
                         "/help - –ø–æ–º–æ—â—å")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    logger.info(f"New message: {message.text}")
    bot.send_message(message.chat.id,
                     help_msg, parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
@bot.message_handler(func=lambda message: message.text == "üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
def new_question(message):
    logger.info(f"New message: {message.text}")
    hide_markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:", reply_markup=hide_markup)
    bot.register_next_step_handler(message, process_question)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
def go_back(message):
    logger.info(f"New message: {message.text}")
    if message.from_user.id == OPERATOR_ID:
        send_operator_welcome(message)
    else:
        send_user_welcome(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in ['1', '2', '3', '4', '5'])
def callback_rating(call):
    rating = call.data
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    logger.info(f"New message: user make a rate")
    username = (
        call.from_user.username
        if call.from_user.username
        else call.from_user.first_name
    )
    user_message = bot.user_question
    output_message = bot.user_answer

    print(username)
    print(rating)
    print(user_message)
    print(output_message)
    if rating == '1':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", callback_data="send_to_operator"))
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", reply_markup=markup)

        save_rating_to_db(username, rating, user_message, output_message)
    else:
        save_rating_to_db(username, rating, user_message, output_message)
        bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
        if call.from_user.id == OPERATOR_ID:
            show_operator_buttons(call.message)
            time.sleep(1)
        else:
            show_main_buttons(call.message)
            time.sleep(1)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"
@bot.callback_query_handler(func=lambda call: call.data == "send_to_operator")
def send_to_operator(call):
    question = bot.answer_question  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    time.sleep(2)
    bot.send_message(call.message.chat.id, f"–í–∞—à –≤–æ–ø—Ä–æ—Å: ¬´_{question}_¬ª, –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ú–§–¶. "
                                           f"–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω.",
                     parse_mode='Markdown')
    show_main_buttons(call.message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
